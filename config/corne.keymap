/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #define ZMK_POINTING_DEFAULT_SCRL_VAL 30    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// Swedish letters and symbols
#define SE_AA LBKT
#define SE_AE SQT
#define SE_OE SEMI
#define SE_QUO BACKSLASH
#define SE_COL LS(DOT)
#define SE_SEMI LS(COMMA)
#define SE_EXCL LS(N1)
#define SE_DQUO LS(N2)
#define SE_HASH LS(N3)
#define SE_PERC LS(N5)
#define SE_AMPR LS(N6)
#define SE_SLSH LS(N7)
#define SE_LPRN LS(N8)
#define SE_RPRN LS(N9)
#define SE_EQAL LS(N0)
#define SE_CIRC LS(RBKT)
#define SE_AT RA(N2)
#define SE_DLR RA(N4)
#define SE_LCBR LS(RA(N8))
#define SE_LBRC RA(N8)
#define SE_RBRC RA(N9)
#define SE_RCBR LS(RA(N9))
#define SE_TILD RA(RBKT)
#define SE_DIAE RBKT
#define SE_ACUT EQUAL
#define SE_MINS SLASH
#define SE_GRAV PLUS
#define SE_LESS NUBS
#define SE_MORE LS(NUBS)
#define SE_PLUS MINUS
#define SE_ASTR LS(BACKSLASH)
#define SE_QUES LS(MINUS)
#define SE_BSLH LS(RA(N7))
#define SE_PIPE RA(N7)
#define SE_USC LS(SLASH)

// Layer names
#define SVORAK 0
#define SYMBOLS 1
#define FNUM 2
#define COMBO 3

/ {
    conditional_layers {
        compatible = "zmk,conditional_layers";
        tri_layer {
            if-layers = <SYMBOLS FNUM>;
            then-layer = <COMBO>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        svorak_layer {
            bindings = <
                &none &kp SE_AA    &kp SE_AE    &kp SE_OE    &kp P       &kp Y       &kp F       &kp G       &kp C       &kp R       &kp L &none
                &none &kp A        &kp O        &kp E        &kp U       &kp I       &kp D       &kp H       &kp T       &kp N       &kp S &none
                &none &kp DOT      &kp Q        &kp J        &kp K       &kp X       &kp B       &kp M       &kp W       &kp V       &kp Z &none
                &kp ESC      &sk LSHFT    &mo FNUM                 &kp ENTER   &kp SPACE   &mo SYMBOLS
            >;
        };

        symbols_layer {
            bindings = <
                &none &kp SE_LCBR  &kp SE_RCBR  &kp SE_LBRC  &kp SE_RBRC  &kp SE_DLR   &kp SE_PLUS  &kp SE_QUES  &kp SE_AMPR  &kp SE_LESS  &kp SE_MORE &none
                &none &kp SE_SEMI  &kp SE_SLSH  &kp SE_LPRN  &kp SE_RPRN  &kp SE_PIPE  &kp COMMA    &kp SE_CIRC  &kp SE_HASH  &kp SE_DQUO  &kp SE_TILD &none
                &none &kp SE_COL   &kp SE_EQAL  &kp SE_AT    &kp SE_EXCL  &kp SE_BSLH  &kp SE_PERC  &kp SE_GRAV  &kp SE_QUO   &kp SE_ASTR  &kp SE_USC &none
                &kp SE_USC   &kp SE_MINS  &kp SE_USC            &none     &trans    &none
            >;
        };

        fnum_layer {
            bindings = <
                &none &kp N1      &kp N2        &kp N3          &kp N4       &kp N5       &kp N6       &kp N7       &kp N8       &kp N9       &kp N0 &none
                &none &sk LGUI    &sk LALT      &sk LSHFT       &sk LCTRL    &mkp MCLK    &kp DEL      &kp LEFT     &kp UP       &kp DOWN     &kp RIGHT &none
                &none &none       &msc SCRL_UP  &msc SCRL_DOWN  &mkp RCLK    &mkp LCLK    &kp BSPC     &kp DEL      &none        &none        &none &none
                                          &bt BT_CLR           &none        &trans       &none        &kp TAB      &bt BT_NXT
            >;
        };

        comdo_layer {
            bindings = <
                // &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4  &bt BT_SEL 5        &none  &none  &none  &none  &none  &none
                &none           &none       &none       &none       &none               &none        &none  &none  &none  &none  &none  &none
                &none          &none         &none         &none         &none          &kp C_PLAY_PAUSE    &none  &none  &none  &none  &none  &none
                &none          &none         &kp C_VOL_UP  &kp C_VOL_DN  &kp C_PREV     &kp C_NEXT          &none  &none  &none  &none  &none  &none
                                          &none           &none        &trans       &none        &trans     &none
            >;
        };
    };
}; 